2017-8-16

python中的函数

1. 接口:是计算机系统中2个独立的部件进行信息交换的抽象化物,用以由内部操作分离出的外部沟通方法,使其能被内部修改而不影响外界其他实体与其交互的方式。

2. 高内聚,低耦合:就是同一个模块内的各个元素之间要高度紧密,但是各个模块之间相互依存度不要太紧密.一个好的内聚模块应当恰好做一件事,内聚描述的是功能内的功能联系,耦合是软件结构中各模块之间相互连接的一种度量.高耦合就意味着低内聚,高内聚就意味着低耦合

3. 函数的作用:封装一套功能性代码,对外提供函数接口.

封装的好处:(1)为了使用的方便，即你不需要它是怎么实现的你只需要知道接口就可以了。(2)提高程序的复用性和运行安全性(3)实现模块化编程,利于维护


4. 内建函数查询: dir(__builtins__) 在交互模式下


5. 函数的三要素:

(1) 功能:函数要实现的功能

(2) 参数:函数的对外接口

(3) 返回值:return

6. 函数的定义:
js或者c中:function(){}

python:def func(参数序列):
	    语句块

python定义函数注意:

(1) 先有定义,才能调用
(2) 在调用时才会分配内存空间,调用完内存空间被清除
(3) 若函数赋给一个变量,那么变量可以直接当函数使用,若函数名被赋值,那么用函数名赋值时就不能当函数使用了
例如:
a = func   --> a()  若  func = 2 --> a = func  --> a()是错误的


7. 避免可变参数的修改
 a = a[:] 或者 转换为不可变对象

8. 传参方式:位置传参,赋值传参,列表传参(*l),字典传参(**d)  --> 是说的调用函数中参数的写法
例如: l = [1,2,3] --> f(*l)

9. 传参数时一定注意:个数要一致,使用其他传参方式,形参名要一致

10. 函数参数的定义:四种

11. return:若返回任何的值,结果为None,返回多个值结果为一个元组

12. 作用域问题:局部作用域可以调用全局变量,global关键字用来在函数或其他局部作用域中使用全局变量。但是如果不修改全局变量也可以不使用global关键字

13. 匿名函数的使用:(lambda x,y,z: x+y+z)(2)  或者  f = lambda x,y,z : x + y + z  -->  f(1,2,3)

14. 什么是命名空间:一个保存变量的内存区域

15. 变量的查找顺序：函数内（本地空间）→ 类内 （本地空间）→ 模块内（全局空间）→ 内置变量（内置空间）

16. 递归函数:调用自身,但是一开始必须有终止条件

17. 函数生成器:生成一个可迭代对象,函数中出现yield,函数就变成生成器 

什么是迭代:迭代是重复反馈过程的活动，其目的通常是为了逼近所需目标或结果。每一次对过程的重复称为一次“迭代”，而每一次迭代得到的结果会作为下一次迭代的初始值。

用内建函数iter()可生成迭代对象

18. yield关键字:相当于返回,但是必须用迭代器(t.next(),t.send()或者for循环)来能显示出yield所返回的值

对yield的理解:

(1) 带yield的函数就变生成器了,生成器可以迭代,但是只可以读取一次,因为用是时候才生成
(2) 生成器能够迭代的关键是有迭代器
(3) yield就是 return 返回一个值，并且记住这个返回的位置，下次迭代就从这个位置后开始。
(4) 带有yield的函数不仅仅只用于for循环中，而且可用于某个函数的参数，只要这个函数的参数允许迭代参数。比如array.extend函数，它的原型是array.extend(iterable)。
(5) send(msg)与next()的区别在于send可以传递参数给yield表达式，这时传递的参数会作为yield表达式的值，而yield的参数是返回给调用者的值。——换句话说，就是send可以强行修改上一个yield表达式值。比如函数中有一个yield赋值，a = yield 5，第一次迭代到这里会返回5，a还没有赋值。第二次迭代时，使用.send(10)，那么，就是强行修改yield 5表达式的值为10，本来是5的，那么a=10

(6) 第一次调用时必须先next()或send(None)，否则会报错,作用是为了让迭代器启动



19. 闭包:包含自由变量的可执行代码块和提供绑定环境的结合,自由变量就是既不定义在全局的,又不定义在执行代码块中的变量,通常就是定义执行代码块的环境中的变量,好处是防止环境被污染

20. 函数调用结束后会清除内存空间

21. 装饰器的作用:(1)装饰同类函数(2)一般用于内部的校验(3)实现原理就是利用闭包,用函数来修饰函数

函数可以装饰函数和类,类也能装饰函数和类

注意:若是需要给装饰器传参,那么需要在外层再套一层函数

22. global 和nonlocal

在函数内部定义的变量称为局部变量，在函数外部定义的变量称为全局变量。

变量的作用范围-->:
全局变量在文件范围内有效
局部变量在函数内部有效
类内部的本地变量在类范围内有效
内嵌模块是全局作用域

global:用来在函数或其他局部作用域中使用全局变量。但是如果不修改全局变量也可以不使用global关键字

nonlocal:用来在函数或其他作用域中使用外层(非全局)变量。主要是在函数嵌套中的内层函数使用外层函数的变量如果不加nonlocal可以打印但是不能修改，加这个标记后可以修改。






