2017-8-18

1. 异常和错误

python常见错误:AttributeError(属性错误),NameError,SyntaxError,TypeError(类型异常)



1. js中的异常处理:




2. python中的异常处理:

格式: try.....except--- 


为什么要捕获异常:保证异常的情况下还能继续执行后面的操作,程序执行不会被阻塞,同时可以对异常进行处理,提高了程序的可靠性和高效


except后面加了指定的异常类型,若该类型不属于

expect后面什么都不写,遇到任何异常都

一个try可以加多个expect

else 没有异常会执行(和try一起)

finally : 都会执行

except 异常名,e 或者 except 异常名 as e    --> 会打印出对应异常的具体错误信息

一个模块: import traceback  --> traceback.print_exc()  可以具体显示错误在哪

raise 抛出一个异常:(1)人为设定的异常(2)可以控制程序终止

assert   满足条件不做任何操作, 不满足抛出AssertionError异常

3. with as 语句 --> 好处:(1)使用完对象会自动消除对象(2) 2个自动化的处理函数:__enter__  和__exit__


4. 模块 : 在python中是一个.py文件,也是对象

标准库:(自带模块 包)

math tracebak time os

第三方库(先安装再使用 pip)


顶层模块:不会去实现具体功能,调用其他模块去控制整个工程的执行流程


import:可导入同级目录下的模块或者全局环境下的模块


reload(模块名):重复的导入模块

模块需要注意事项:
1. 导入时若名字特别长时可以用as来取别名
2. 模块导入机制是你多次导入同一个模块也只会执行一次,若想多次导入就需要内建函数reload()
3. 顶层代码就是最外层的代码,而不是代码块中的代码
4. 导入一个模块需要注意:若有顶层代码,那么模块一导入就执行,而函数主体代码直到函数被调用时候才会执行。但是我们不建议一个非顶层模块包含很多类和函数之外的代码。
5. 尽量一次导入一个模块名,也可以一个import导入多个,中间用逗号隔开,但是不建议使用
6. 每个模块都有自己的命名空间
7. 当导入一个模块时,会生成被导入模块的.pyc文件,这样下次导入时就会提高效率
8. 在一个模块的顶层定义的所有变量（全局的变量）都在导入时成为了被导入模块的属性


9. from b import    --> 把另一个命名空间中的属性导入到当前命名空间,起重名会覆盖,可以直接用,不需要模块名.属性

10. 三种变量:public,private,project

__init__: 特有属性,魔法函数

__fun: 类中的私有成员,不能被外部直接使用

_A :  受保护的模块成员,不能被from import * 直接导入 ,必须得具体导入


11. __name__ : 所在文件为顶层模块执行时,__name__就是__main__,当被其他顶层模块导入时,__name__就是被导入模块的模块名

所以我们可以利用 :  if __name__ == '__main__':测试代码                   --> 来进行代码功能测试

12. 包:一组模块组成的文件夹

引入包的时候,需要在被引入的包的下面添加一个__init__.py文件

__init__.py : 包的初始化文件

13.
sys,os,time,datetime
random.randint(1,9) --> 1-9的随机数
 random.randrange(20)
random.choice([1,2,3,4])

14. struct.pack()  --> 打包
srtuct.unpack()  --> 解包成指定格式
