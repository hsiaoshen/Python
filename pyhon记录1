2017-8-14


当你输入url按下回车会发生什么?


python的相关知识理解

1. python网址是python.org(蟒蛇)

2. 为什么要选择python?

因为PHP应用范围很小,而java应用范围太广(android,web,大数据),而python有如下特点:

(1) 开源(及源代码开放),人类整体的智慧是无尽的,开源促进计算机语言更符合人类的思维模式,同时使语言更加完善和优雅.
(2) 是一个面向对象的强类型的动态编程语言,属于解释型语言
(3) 思想:优美,简单高效,清晰
(4) 跨平台性,能够和很多语言进行很好的融合(拥有强大的标准库和多样性的解释器,可以嵌套在很多语言中)

3. 什么是GNU GPL?

是一个广泛被使用的自由软件许可证,关键概念是Copyleft.GPL规定，再发行权的授予需要许可证接受人公开软件的源代码及所有修改，而且复制件、修改版本都必须以GPL为许可证。这些要求就是Copyleft，它的基础就是作品在法律上版权所有。

4. Copyright

版权是对计算机程序、文学著作、音乐作品、照片、电影等的复制权利的合法所有权。除非转让给另一方，版权通常被认为是属于作者的。大多数计算机程序不仅受到版权的保护，还受软件许可证的保护。版权只保护思想的表达形式，而不保护思想本身。算法、数学方法、技术或机器的设计均不在版权的保护之列。

5. 什么是解释型和编译型?

都是把高级语言翻译成机器语言,只是翻译的时间不同.

编译型语言:通过编译器把高级语言翻译成可执行的二进制文件,流程为hello.c(源程序代码)经过预处理器,再通过编译器成为hello.s(汇编程序),再通过汇编器生成hello.o的二进制文件,最后通过链接器生成可执行的二进制文件,由于只编译一次所以相对而言程序执行效率高

解释型语言:不需要编译,程序运行时才进行翻译然后告诉我门结果,这样每次执行就要翻译一次,效率较低,但使用灵活

java是一个半解释半编译的语言

6. 什么是动态编程语言和静态编程语言?什么是强类型和弱类型?

都是针对内存而言的

(1)动态编程语言:它只在程序运行期间才去进行数据类型检查，不需要给变量指定数据类型，它会在第一次同仁给变量时，在内部记录数据类型。灵活性高提升了开发速度,但是失去了程序的健壮性.(python,Ruby)

(2)静态编程语言:使用静态类型语言编写的代码中，要声明变量的数据类型，而且不同数据类型的变量不允许直接赋值，它的数据类型是编译期间进行检查的。在使用变量时需要分配内存,程序严格性好但是不灵活.(C,C++,C#,java)

(3)强类型: 一旦定义了变量的数据类型,除非强制转换,否则不能更改数据类型

(4)弱类型:可以隐性的类型转换("1"+1 ='11')

7. 面向对象,面向过程,面向类

(一) 面向对象:以数据为核心(决定用什么来完成)

什么是对象:

面向对象的三大基本特性和五大基本原则:

(1) 三大基本特征:封装,继承和多态


封装: 也就是把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。 简单的说，一个类就是一个封装了数据以及操作这些数据的代码的逻辑实体。在一个对象内部，某些代码或某些数据可以是私有的，不能被外界访问。通过这种方式，对象对内部数据提供了不同级别的保护，以防止程序中无关的部分意外的改变或错误的使用了对象的私有部分。闭包可以访问定义该作用域的函数的私有成员和私有方法.

继承:指可以让某个类型的对象获得另一个类型的对象的属性的方法。它支持按级分类的概念。继承是指这样一种能力：它可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。 通过继承创建的新类称为“子类”或“派生类”，被继承的类称为“基类”、“父类”或“超类”。继承的过程，就是从一般到特殊的过程。要实现继承，可以通过“继承”（Inheritance）和“组合”（Composition）来实现。继承概念的实现方式有二类：实现继承与接口继承。实现继承是指直接使用基类的属性和方法而无需额外编码的能力；接口继承是指仅使用属性和方法的名称、但是子类必须提供实现的能力

多态:所谓多态就是指一个类实例的相同方法在不同情形有不同表现形式。多态机制使具有不同内部结构的对象可以共享相同的外部接口。这意味着，虽然针对不同对象的具体操作不同，但通过一个公共的类，它们（那些操作）可以通过相同的方式予以调用。

(2) 五大基本原则:

单一职责原则SRP(Single Responsibility Principle)
是指一个类的功能要单一，不能包罗万象。如同一个人一样，分配的工作不能太多，否则一天到晚虽然忙忙碌碌的，但效率却高不起来。

开放封闭原则OCP(Open－Close Principle) 
一个模块在扩展性方面应该是开放的而在更改性方面应该是封闭的。比如：一个网络模块，原来只服务端功能，而现在要加入客户端功能，
那么应当在不用修改服务端功能代码的前提下，就能够增加客户端功能的实现代码，这要求在设计之初，就应当将服务端和客户端分开，公共部分抽象出来。

替换原则(the Liskov Substitution Principle LSP) 
子类应当可以替换父类并出现在父类能够出现的任何地方。比如：公司搞年度晚会，所有员工可以参加抽奖，那么不管是老员工还是新员工，
也不管是总部员工还是外派员工，都应当可以参加抽奖，否则这公司就不和谐了。

依赖原则(the Dependency Inversion Principle DIP) 具体依赖抽象，上层依赖下层。假设B是较A低的模块，但B需要使用到A的功能，
这个时候，B不应当直接使用A中的具体类： 而应当由B定义一抽象接口，并由A来实现这个抽象接口，B只使用这个抽象接口：这样就达到
了依赖倒置的目的，B也解除了对A的依赖，反过来是A依赖于B定义的抽象接口。通过上层模块难以避免依赖下层模块，假如B也直接依赖A的实现，那么就可能造成循环依赖。一个常见的问题就是编译A模块时需要直接包含到B模块的cpp文件，而编译B时同样要直接包含到A的cpp文件。

接口分离原则(the Interface Segregation Principle ISP) 
模块间要通过抽象接口隔离开，而不是通过具体的类强耦合起来


(二)面向过程: 以语句为核心,采用从上到下的编程思想

(三)面向类:是一个具有公共属性的一个群体,对象可以是类的实例化.

8. 面向对象有什么优点?

(1) 易维护
采用面向对象思想设计的结构，可读性高，由于继承的存在，即使改变需求，那么维护也只是在局部模块，所以维护起来是非常方便和较低成本的。
(2) 质量高
在设计时，可重用现有的，在以前的项目的领域中已被测试过的类使系统满足业务需求并具有较高的质量。
(3) 效率高
在软件开发时，根据设计的需要对现实世界的事物进行抽象，产生类。使用这样的方法解决问题，接近于日常生活和自然的思考方式，势必提高软件开发的效率和质量。
(4) 易扩展
由于继承、封装、多态的特性，自然设计出高内聚、低耦合的系统结构，使得系统更灵活、更容易扩展，而且成本较低


9. 第三方包管理:pip

安装: sudo apt install python-pip(或pyton3-pip)

常用命令:(1)pip install somepackage (2) pip install --upgrade somepackage (3)pip list (4) pip show somepackage (4) pip uninstall ...

10. pyhton的常用Web应用框架:Django,Flask,Web2py



课堂知识

1. 数字: 整型 浮点型 复数 科学计数法

2. 常量不能出现在赋值的左边的,变量的存在使代码更加灵活

3. 常用标识符命名规则:小驼峰,大驼峰,名字一般用下划线进行链接单词

4. python中变量尽量不以下划线进行命名

5. Python中相同的类型指向同一个对象 

6. 都是内存输出(红色字体)    

7. 内建函数(built in function):可以拿过来直接用的函数: id  type help dir len

8. dir书写顺序:module class __A__ 接口

9. 2个值的交换:a,b = b,a

10. Python中的引用计数原则:垃圾回收处理机制,一旦引用不为0,一定不会清除内存;一旦引用为0若资源紧张会立即清除内存,一般还有保存,这就是为什么有时候id会一致(原因是python中相同值的变量指向同一个地址,资源不紧张时内存不会立即被清除)

11. del关键字:清除的只是变量名 

12. 强制类型转换:

13.进制转换:hex(), ord(),

14. 短路原则:若果第一个表达式的结果能决定最后的结果那就不进行后面的计算

14. 运算:除法差异(python2.0中'/'为整除,要想得到真除结果需要强制类型转换,3.0中'/'是真除,'//'是整除)

~x:按位取反,符号位也取反

x ** y:幂运算

15. .py文件的2中执行方式:(1) chomod 777 x.py -->  代码最上行加指定解释器  #!/usr/bin/env python(或python3)  -->  ./x.py    (2) 执行时用python x.py(或者python3 x.py) 

16. 字符串:单引号换行要转义字符'\',三引号保存字符串格式

17. python中print要加括号

18. python3中可以直接使用中文,python2中要输出中文必须在前面加#coding=uft-8

19. 字符串的切片操作:(遵循的规则是从左到右,起始位置应该在终止位置左边)

    s[1:2:3]

    只有1的时候表示索引,1为负数的时候从结尾开始
    有1和2的时候,1表示起始位置,2表示终止位(但不包括终止位).如果1,2都为负数,那么2要比1大
    省略1的时候,从0位置开始;省略2时表示到结尾.
    有1,2,3时候,1,2同上,3表示步长(每隔几个取1个)
    如果3是负数,那么2的位置要比你靠前,如果是正数,则相反
    实现字符串的反转:s[::-1]
    l = l1[:] 实现复制功能

20. 字符串是不可变的数据类型:所以对字符串的replace等操作不会影响原来的,只是生成一个新的字符串

21. format的操作: s="h1,{},{}".format('Tom','11')  或者 s = "h1,{1},{0}".format('Tom','111')

22. find的操作:查找不到返回-1,否则返回索引位置

23. python程序的组成

程序由模块构成(在python中一个文件就是一个模块)
模块包含语句
语句包含表达式
表达式建立并处理对象

24. 常用关键字

循环判断

if elif else for while break continue and or is not in 

函数模块类

from import as def(定义函数) pass lambda(匿名函数) return class 

异常

try(捕获一个异常) except(处理一个异常) finally raise(抛出一个异常)

其他

del global with assert yield 
True  False  None nonlocal  ----> 3.x
exec  print         ----> 2.x


25. math模块的使用

import math 

math.pow(3,2)

math.sqrt(9)

注意:结果为浮点型

26. in的使用:判断一个字符串是不是另一个字符串的子串

27. istitle():判断一个字符串的第一个字母是不是大写,没有参数

28. '*'.join(seq): 前面是链接符,后面要被操作的元祖等,最后得到一个用连接符而成的字符串

29. S.split([sep [,maxsplit]]) -> list of strings

30. repr:把元素变成字符串形式

31. 字符串的拼接'+',重复'*'
