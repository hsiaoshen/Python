2017-8-15

只有单行注释:#
多行注释可以用三引号来完成

1. 输入

python 2


input('提示'):字符串输入需要加引号

raw_input('提示'):不论你输入什么,都按字符串来处理


python 3

只有input(),但是和2中的raw_input()相同用法

>>>若要进行运算那就需要强制转换


多项输入时:

(1) 若多个input时,用回车符作为分隔符,用空格会报错
(2) 若一个input,多个输入用逗号隔开,结果为一个元祖
(3) a,b = input(),若要想a,b都获得值,必须输入的值的分配的个数要相等

2. 输出(print)

python2   print

python3   print()


print用法:

(1) print 每一项都可以是常量/变量
(2) 当输出多项的时候用逗号隔开,会自动添加空格
(3) 可以对字符串进行格式化输出
(4) 格式控制修饰符:%d %u %s %c %x %f
(5) 换行问题 python2 结尾加逗号','  python3中:print('aaa', end='')
(6) 向流中输出

with open('file.text','w+') as fd:
(python2) print>>fd, 'hello world'
(python3) print('hello', file =fd) 

3.
 
可变数据类型(操作会改变自身):列表,字典,集合
不可变数据类型(操作不会改变自身):字符串,元组

4. 列表list(可变数据类型)

定义: []

元素: 可以是任意类型,包含构造类型

有序的集合:可以使用下标来索引

内存存储:各自定义的2个列表id不同,通过赋值的2个列表指向同一个存储空间;若该列表中还有一个列表,那么只是存储的另一个列表空间的地址

改变l1不改变l2的方法:1) 简单:各自定义各自的 2)使用copy.copy(被复制的列表)>>>>注意要引用copy模块 3)要是列表中还有列表,用2)的方法若该列表的内部列表中的值发生改变,那么复制后的列表也会跟着改,此时可以使用copy.deepcopy()

支持  +  * in

常用方法:
(1) l.append(1) --> 在最后添加一个元素
(2) l.count(1) --> 元素在列表中的个数
(3) l.extend([4,5,6]) --> 列表合并
(4) l.index()
(5) l.pop(index) --> 弹出一个元素(参数是索引位置)
(6) l.remove(1)  --> 移除一个元素(参数是一个元素)
(7) l.reverse()  --> 倒序
(8) l.sort() --> 排序,默认从小到大
(9) l.sort(f) --> 传函数进行排序       def f(x,y): return y - x
(10) del 和切片操作
  

5. 元组tuple(不可变数据类型)

定义: ()

元素: 可以是任意类型,包含构造类型

有序集合

不能用del删除

单纯一个小括号起强调作用,若要有一项的元组必须后面加逗号: t = (1,)

若元组中包含列表,那么列表是可变的,因为列表是单独分配出的一个空间,而元组只是存储了该空间的地址

常用方法:count,index

支持  +  * in


6. 字典dict(可变数据类型)

定义: {}

元素: 键值对形式,值可以是任意类型,包含构造类型,函数名(要求:键不能重复,可以是整形,字符,字符串,浮点型,但是字符串使用较多)

无序集合

支持 in

操作:
(1) 取值:d[键名]
(2) 删除:del
(3) 增加:d[键名] = 值

方法:

(1) d.clear() --> 变为空字典
(2) d1 = d.copy() --> 赋值d成一个新的字典,没有参数,id不同
(3) d.get('a','none') --> 第一个必需参数是要查询条件(键),判断d中有没有第一个参数,有则返回值,没有若第二参数有,返回第二参数,否则什么都不显示
(4) d.fromkeys(s,[v]) --> 获取一个元组中的值作为键,若没有v,则默认为None,否则值为v
(5) d.items() --> 生成一个元素为元组的列表,每个元组由键和值组成
(6) d2 = d.iteritems() --> 生成一个具有迭代关系的,可用d2.next()依次获取由键和值组成的元组,直到报错
(7) d2 = d.iterkeys() --> 同(6),得到是键
(8) d2 = d.itervalues() --> 同(6),得到的是值
(9) d.pop(键名) --> 弹出一个满足条件的键值对
(10) d.popitem() --> 没有参数,随机弹出一个键值对
(11) d.setdefault('a',[v]) --> 查看该键在字典中有无,若有则输出该键的值,否则,就添加到字典中(v存在,则添加的键的值为v,否则为None)
(12) d.update({'k':1}) --> 说白了就是把后面的字典合并到前面字典中  


7. 集合set(可变数据类型)

定义: {}  set()    --> 若定义空集合不能直接{},必须set({})

无法单个取值,一般都是整体使用

无序集合

支持 in - | & ^

操作:
(1). '1' in {1,2.3} --> false
(2). 创建一个不可变集合:frozenset() 
(3)  a = {1,2,3} b ={3,4,5,6}

a - b = {1,2}  -->a抛弃a和b的交集
a | b = {1,2,3,4,5,6} --> 并集
a & b = {3} --> 交集
a^ b =  {1,2,4,5,6} --> a和b的并集抛弃了a和b的交集


方法:
(1) s.add(元素) --> 向集合中添加一个元素,只能有一个参数为元素
(2) s.clear()
(3) s1 = s.copy() --> 复制
(4) s.difference(s1) --> 相比s1,s独有的元素组成的集合
(5) s.difference(集合) --> 把参数中的集合元素如果有就从s中移除
(6) s.discard(元素) --> 参数为单个元素,如果有该元素就移除
(7) s.pop() --> 没有参数,按顺序依次弹出一个集合中的元素
(8) s.update(集合) --> 参数是一个集合,向s中添加该集合中的元素,说白了就是集合合并,s发生改变
(9) s.union() --> 求交集,但是原来的s没有发生变化



8. 数据类型小结

数据类型      数字      字符串    列表    元组     字典   set集合     frozenset集合

有序性        xx         有        有      有      无     无               无

可变性        不可       不可       可     不可     可     可             不可

运算        数学运算     + * in    + * in   + * in  in     In - | & ^      in - | & ^


9. 缩进风格
在Python中所有的复合语句（也就是语句中嵌套语句）都有相同的一般形式，就是首行以冒号结尾，首行的下一行嵌套代码以缩进标识。缩进的结束就是代码快的结束

10 if语句

false:0 数据类型的空,比如空列表

if的条件运算

x if y else z  --> y为真返回x,否则返回z


11. while 

在python中不支持自增自减,可以+= -=

while .... else...  --> 只有while正常执行完毕后才执行else语句,如果被break打断,那么不再执行else 


12. for

for 变量 in 列表/元组/字符串/字典:
	语句块

注意: 字典中使用for只是取键,结果是按一定规律输出的键

for还可以做生成器

13. range()和xrange():生成一个列表

range():

使用如下:

(1) range(10) --> 只有1个参数,总长度为10,从0开始
(2) range(1,5)  --> 2个参数,从1开始到5,但不包括5
(3) range(1,5,2) --> 最后一个为步长


xrange() 需要强转 例如: list(xrange(10))

14.内置函数 zip(),map(),filter(),reduce()


zip()  --> 将2个列表合成一个元组组成的列表,以最短的长度作为最终长度,一个参数也能运行,不改变原有的列表

例如:x = [1, 2, 3]  y = [4, 5, 6]   --> k= zip(x,y)  -->k =  [(1,4),(2,5),(3,6)] -->k1 =  zip(*k) -->k1 =  [(1,2,3),(4,5,6)]


map(f,list) --> 高阶函数,不改变原有的,生称一个新的列表,参数是一个函数(用来转换的)

例如: def f(x):
	return x * x
l1 = map(f,[1,2,3]) --> l1 = [1,4,9]


filter(f,list) --> 按照函数f中的要求过滤掉list中不满足条件的元素,得到最终的结果

reduce(f,list[,opt]) --> 一般用来累加,f为定义的累加函数,把list中的元素一个个都取出来然后进行处理,若有opt,则opt作为起始x值进行计算


15. 在python2中True和False不是关键词,可以赋值,但是3中不允许

16. 由于没有{}来作为语句块标识,不写又是语法错误,所以引入了pass

